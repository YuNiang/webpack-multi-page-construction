"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _path = require("path");

var _path2 = _interopRequireDefault(_path);

var _process = require("process");

var _process2 = _interopRequireDefault(_process);

var _postcss = require("postcss");

var _postcss2 = _interopRequireDefault(_postcss);

var _pkgResolve = require("pkg-resolve");

var _pkgResolve2 = _interopRequireDefault(_pkgResolve);

var _readCache = require("read-cache");

var _readCache2 = _interopRequireDefault(_readCache);

var _sugarss = require("sugarss");

var _sugarss2 = _interopRequireDefault(_sugarss);

var _postcssScss = require("postcss-scss");

var _postcssScss2 = _interopRequireDefault(_postcssScss);

var _postcssLess = require("postcss-less");

var _postcssLess2 = _interopRequireDefault(_postcssLess);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/*
===============================================================================
  PostCSS Load
  Copyright 2016 Sebastian Software GmbH <https://www.sebastian-software.de>
===============================================================================
*/

var parserMap = {
  ".sss": _sugarss2.default
};

var syntaxMap = {
  ".scss": _postcssScss2.default,
  ".less": _postcssLess2.default
};

var CWD = _process2.default.cwd();

function parseStylesheet(filename, content) {
  var syntax = arguments.length <= 2 || arguments[2] === undefined ? null : arguments[2];
  var parser = arguments.length <= 3 || arguments[3] === undefined ? null : arguments[3];
  var plugins = arguments.length <= 4 || arguments[4] === undefined ? null : arguments[4];

  var fileext = _path2.default.extname(filename);

  if (syntax == null) {
    syntax = syntaxMap[fileext];
  }

  if (parser == null) {
    parser = parserMap[fileext];
  }

  var plugins = [];
  return (0, _postcss2.default)(plugins).process(content, {
    from: filename,
    syntax: syntax,
    parser: parser
  });
}

var fileEncoding = "utf-8";

var loadPlugin = _postcss2.default.plugin("postcss-load", function () {
  var pluginOptions = arguments.length <= 0 || arguments[0] === undefined ? {} : arguments[0];

  return function (css, result) {
    var promisesQueue = [];
    var thisPath = _path2.default.relative(CWD, css.source.input.file);
    var thisFolder = _path2.default.dirname(css.source.input.file);

    css.walkAtRules("load", function (rule) {
      var params = _postcss2.default.list.space(rule.params);

      if (params.length !== 1) {
        throw rule.error("Invalid @load parameter number", { plugin: "postcss-load" });
      }

      // Support params with and without quotes
      try {
        var includeFile = JSON.parse(params[0]);
      } catch (ex) {
        var includeFile = params[0];
      }

      promisesQueue.push(new Promise(function (resolve, reject) {
        (0, _pkgResolve2.default)(includeFile, { basedir: thisFolder }).then(function (resolvedFile) {
          (0, _readCache2.default)(resolvedFile, fileEncoding).then(function (fileContent) {
            var parsed = parseStylesheet(resolvedFile, fileContent);

            loadProcessor.process(parsed).then(function (processedChild) {
              // Copy over messages from parsed child document
              if (processedChild.messages.length > 0) {
                result.messages.push.apply(result.messages, processedChild.messages);
              }

              rule.replaceWith(processedChild.root);
              resolve();
            }).catch(function (processIncludeError) {
              rule.warn(result, "Unable to process included file! " + processIncludeError);
              resolve();
            });
          }).catch(function (openIncludeError) {
            rule.warn(result, "Unable to open included file! " + openIncludeError);
            resolve();
          });
        }).catch(function (resolveIncludeError) {
          rule.warn(result, "Unable to resolve include reference! " + resolveIncludeError);
          resolve();
        });
      }));
    });

    return Promise.all(promisesQueue);
  };
});

var loadProcessor = (0, _postcss2.default)([loadPlugin]);

exports.default = loadPlugin;
//# sourceMappingURL=index.js.map