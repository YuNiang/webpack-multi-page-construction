/*
===============================================================================
  PostCSS Load
  Copyright 2016 Sebastian Software GmbH <https://www.sebastian-software.de>
===============================================================================
*/

import path from "path"
import process from "process"

import postcss from "postcss"
import pkgResolve from "pkg-resolve"
import read from "read-cache"

import parser_sugar from "sugarss"
import syntax_scss from "postcss-scss"
import syntax_less from "postcss-less"

const parserMap = {
  ".sss": parser_sugar
}

const syntaxMap = {
  ".scss": syntax_scss,
  ".less": syntax_less
}

const CWD = process.cwd()

function parseStylesheet(filename, content, syntax=null, parser=null, plugins=null)
{
  var fileext = path.extname(filename)

  if (syntax == null) {
    syntax = syntaxMap[fileext]
  }

  if (parser == null) {
    parser = parserMap[fileext]
  }

  var plugins = []
  return postcss(plugins).process(content, {
    from: filename,
    syntax: syntax,
    parser: parser
  })
}

const fileEncoding = "utf-8"

const loadPlugin = postcss.plugin("postcss-load", (pluginOptions = {}) =>
{
  return function(css, result)
  {
    var promisesQueue = [];
    var thisPath = path.relative(CWD, css.source.input.file);
    var thisFolder = path.dirname(css.source.input.file)

    css.walkAtRules("load", (rule) =>
    {
      var params = postcss.list.space(rule.params)

      if (params.length !== 1) {
        throw rule.error("Invalid @load parameter number", { plugin: "postcss-load" })
      }

      // Support params with and without quotes
      try{
        var includeFile = JSON.parse(params[0])
      } catch(ex) {
        var includeFile = params[0]
      }

      promisesQueue.push(new Promise(function(resolve, reject)
      {
        pkgResolve(includeFile, {basedir : thisFolder}).then(function(resolvedFile)
        {
          read(resolvedFile, fileEncoding).then(function(fileContent)
          {
            var parsed = parseStylesheet(resolvedFile, fileContent)

            loadProcessor.process(parsed).then(function(processedChild)
            {
              // Copy over messages from parsed child document
              if (processedChild.messages.length > 0) {
                result.messages.push.apply(result.messages, processedChild.messages)
              }

              rule.replaceWith(processedChild.root)
              resolve()
            }).
            catch(function(processIncludeError)
            {
              rule.warn(result, "Unable to process included file! " + processIncludeError)
              resolve()
            })
          }).
          catch(function(openIncludeError)
          {
            rule.warn(result, "Unable to open included file! " + openIncludeError)
            resolve()
          })
        }).
        catch(function(resolveIncludeError)
        {
          rule.warn(result, "Unable to resolve include reference! " + resolveIncludeError)
          resolve()
        })
      }))
    })

    return Promise.all(promisesQueue)
  }
})

var loadProcessor = postcss([loadPlugin])

export default loadPlugin
