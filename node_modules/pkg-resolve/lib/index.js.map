{"version":3,"sources":["../src/index.js"],"names":[],"mappings":"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","file":"index.js","sourcesContent":["import jspm from \"jspm\"\nimport npmResolve from \"resolve\"\nimport fs from \"fs\"\nimport path from \"path\"\nimport process from \"process\"\n\nconst jspmLoader = new jspm.Loader()\n\nexport function packageFilter(pkg)\n{\n  // Prefer ES6 Modules (overwrite main)\n  if (pkg[\"jsnext:main\"])\n    pkg.main = pkg[\"jsnext:main\"]\n\n  // Use style file when still no main defined\n  if (!pkg.main && pkg.style)\n    pkg.main = pkg.style\n\n  return pkg\n}\n\nexport const extensions = [\n  \".js\",\n  \".css\",\n  \".scss\",\n  \".sss\",\n  \".sass\",\n  \".less\",\n  \".woff2\",\n  \".woff\",\n  \".ttf\",\n  \".otf\",\n  \".eot\",\n  \".svg\",\n  \".png\",\n  \".jpeg\",\n  \".jpg\",\n  \".jp2\",\n  \".j2k\",\n  \".jxr\",\n  \".gif\",\n  \".ico\",\n  \".htc\",\n  \".webp\",\n  \".bmp\",\n  \".cur\",\n  \".json\",\n  \".m4a\",\n  \".m4v\",\n  \".mp4\",\n  \".mp3\",\n  \".pdf\",\n  \".rdf\",\n  \".rss\",\n  \".atom\",\n  \".swf\",\n  \".vue\",\n  \".xml\",\n  \".map\"\n]\n\nexport const extensionsSet = new Set(extensions)\n\nexport function resolveNPM(id, options = {})\n{\n  return new Promise((fulfill, reject) =>\n    npmResolve(id, options, (error, resolved) =>\n      error ? reject(error) : fulfill(resolved)\n    )\n  )\n}\n\nexport function resolveJSPM(id)\n{\n  return new Promise(function(fulfill, reject)\n  {\n    var isFileRequest = id.includes(\"/\")\n    var idFileExt = path.extname(id)\n    var skipExt = (isFileRequest || extensionsSet.has(idFileExt)) && Boolean(idFileExt)\n\n    // Signature: normalize(id, parentName, parentAddress)\n    jspmLoader.normalize(id, null, skipExt).then(function(result)\n    {\n      // Convert to non-url real usable file system path\n      result = result.replace(\"file://\", \"\")\n\n      // Check whether the actual file is there... JSPM normalize also delivers non-existing paths\n      fs.lstat(result, function(statError, statResult)\n      {\n        if (statError || !statResult.isFile())\n          reject(statError)\n        else\n          fulfill(result)\n      })\n    })\n    .catch((jspmError) =>\n      reject(jspmError)\n    )\n  })\n}\n\nexport default function resolve(id, options = {})\n{\n  const basedir = path.resolve(options.basedir || process.cwd())\n  const resolveOpts =\n  {\n    basedir,\n    extensions,\n    packageFilter\n  }\n\n  return resolveNPM(`./${id}`, resolveOpts)\n    .catch(() =>\n      resolveNPM(id, resolveOpts)\n    )\n    .catch(() =>\n      resolveJSPM(id)\n    )\n    .catch(() =>\n    {\n      throw new Error(`Failed to find: ${id}`)\n    })\n}\n"]}