"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.extensionsSet = exports.extensions = undefined;
exports.packageFilter = packageFilter;
exports.resolveNPM = resolveNPM;
exports.resolveJSPM = resolveJSPM;
exports.default = resolve;

var _jspm = require("jspm");

var _jspm2 = _interopRequireDefault(_jspm);

var _resolve = require("resolve");

var _resolve2 = _interopRequireDefault(_resolve);

var _fs = require("fs");

var _fs2 = _interopRequireDefault(_fs);

var _path = require("path");

var _path2 = _interopRequireDefault(_path);

var _process = require("process");

var _process2 = _interopRequireDefault(_process);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var jspmLoader = new _jspm2.default.Loader();

function packageFilter(pkg) {
  // Prefer ES6 Modules (overwrite main)
  if (pkg["jsnext:main"]) pkg.main = pkg["jsnext:main"];

  // Use style file when still no main defined
  if (!pkg.main && pkg.style) pkg.main = pkg.style;

  return pkg;
}

var extensions = exports.extensions = [".js", ".css", ".scss", ".sss", ".sass", ".less", ".woff2", ".woff", ".ttf", ".otf", ".eot", ".svg", ".png", ".jpeg", ".jpg", ".jp2", ".j2k", ".jxr", ".gif", ".ico", ".htc", ".webp", ".bmp", ".cur", ".json", ".m4a", ".m4v", ".mp4", ".mp3", ".pdf", ".rdf", ".rss", ".atom", ".swf", ".vue", ".xml", ".map"];

var extensionsSet = exports.extensionsSet = new Set(extensions);

function resolveNPM(id) {
  var options = arguments.length <= 1 || arguments[1] === undefined ? {} : arguments[1];

  return new Promise(function (fulfill, reject) {
    return (0, _resolve2.default)(id, options, function (error, resolved) {
      return error ? reject(error) : fulfill(resolved);
    });
  });
}

function resolveJSPM(id) {
  return new Promise(function (fulfill, reject) {
    var isFileRequest = id.includes("/");
    var idFileExt = _path2.default.extname(id);
    var skipExt = (isFileRequest || extensionsSet.has(idFileExt)) && Boolean(idFileExt);

    // Signature: normalize(id, parentName, parentAddress)
    jspmLoader.normalize(id, null, skipExt).then(function (result) {
      // Convert to non-url real usable file system path
      result = result.replace("file://", "");

      // Check whether the actual file is there... JSPM normalize also delivers non-existing paths
      _fs2.default.lstat(result, function (statError, statResult) {
        if (statError || !statResult.isFile()) reject(statError);else fulfill(result);
      });
    }).catch(function (jspmError) {
      return reject(jspmError);
    });
  });
}

function resolve(id) {
  var options = arguments.length <= 1 || arguments[1] === undefined ? {} : arguments[1];

  var basedir = _path2.default.resolve(options.basedir || _process2.default.cwd());
  var resolveOpts = {
    basedir: basedir,
    extensions: extensions,
    packageFilter: packageFilter
  };

  return resolveNPM("./" + id, resolveOpts).catch(function () {
    return resolveNPM(id, resolveOpts);
  }).catch(function () {
    return resolveJSPM(id);
  }).catch(function () {
    throw new Error("Failed to find: " + id);
  });
}
//# sourceMappingURL=index.js.map