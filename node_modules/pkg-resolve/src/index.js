import jspm from "jspm"
import npmResolve from "resolve"
import fs from "fs"
import path from "path"
import process from "process"

const jspmLoader = new jspm.Loader()

export function packageFilter(pkg)
{
  // Prefer ES6 Modules (overwrite main)
  if (pkg["jsnext:main"])
    pkg.main = pkg["jsnext:main"]

  // Use style file when still no main defined
  if (!pkg.main && pkg.style)
    pkg.main = pkg.style

  return pkg
}

export const extensions = [
  ".js",
  ".css",
  ".scss",
  ".sss",
  ".sass",
  ".less",
  ".woff2",
  ".woff",
  ".ttf",
  ".otf",
  ".eot",
  ".svg",
  ".png",
  ".jpeg",
  ".jpg",
  ".jp2",
  ".j2k",
  ".jxr",
  ".gif",
  ".ico",
  ".htc",
  ".webp",
  ".bmp",
  ".cur",
  ".json",
  ".m4a",
  ".m4v",
  ".mp4",
  ".mp3",
  ".pdf",
  ".rdf",
  ".rss",
  ".atom",
  ".swf",
  ".vue",
  ".xml",
  ".map"
]

export const extensionsSet = new Set(extensions)

export function resolveNPM(id, options = {})
{
  return new Promise((fulfill, reject) =>
    npmResolve(id, options, (error, resolved) =>
      error ? reject(error) : fulfill(resolved)
    )
  )
}

export function resolveJSPM(id)
{
  return new Promise(function(fulfill, reject)
  {
    var isFileRequest = id.includes("/")
    var idFileExt = path.extname(id)
    var skipExt = (isFileRequest || extensionsSet.has(idFileExt)) && Boolean(idFileExt)

    // Signature: normalize(id, parentName, parentAddress)
    jspmLoader.normalize(id, null, skipExt).then(function(result)
    {
      // Convert to non-url real usable file system path
      result = result.replace("file://", "")

      // Check whether the actual file is there... JSPM normalize also delivers non-existing paths
      fs.lstat(result, function(statError, statResult)
      {
        if (statError || !statResult.isFile())
          reject(statError)
        else
          fulfill(result)
      })
    })
    .catch((jspmError) =>
      reject(jspmError)
    )
  })
}

export default function resolve(id, options = {})
{
  const basedir = path.resolve(options.basedir || process.cwd())
  const resolveOpts =
  {
    basedir,
    extensions,
    packageFilter
  }

  return resolveNPM(`./${id}`, resolveOpts)
    .catch(() =>
      resolveNPM(id, resolveOpts)
    )
    .catch(() =>
      resolveJSPM(id)
    )
    .catch(() =>
    {
      throw new Error(`Failed to find: ${id}`)
    })
}
